{
  "openapi": "3.0.0",
  "info": {
    "title": "A+4BED API",
    "description": "This the API Docmentation of A+4BED",
    "version": "1.0.0"
  },
  "host": "localhost:3001",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/signup": {
      "post": {
        "summary": "Create a new user account",
        "description": "Endpoint to register a new user with their email, name, password, and optionally, PayPal email for company users.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "userType": {
                    "type": "string",
                    "enum": ["U", "C"],
                    "example": "U"
                  },
                  "paypalEmail": {
                    "type": "string",
                    "example": "paypal@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User signed up successfully"
                    },
                    "userId": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error creating user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Authenticate a user with their email and password to obtain an access token and refresh token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Email not found or incorrect password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error logging in user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userlogin": {
      "get": {
      "summary": "User login check",
      "description": "This endpoint checks the status of the user login session. It typically returns a status code indicating whether the user is currently logged in or not.",
      "responses": {
        "200": {
          "description": "Login session status checked successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loggedIn": {
                    "type": "boolean",
                    "example": true
                  },
                  "userId": {
                    "type": "integer",
                    "example": 123
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "summary": "User login",
      "description": "Authenticate a user with their email and password to obtain an access token.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              },
              "required": ["email", "password"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Login successful",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": true
                  },
                  "message": {
                    "type": "string",
                    "example": "Login successful"
                  },
                  "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid email or password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": false
                  },
                  "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error logging in user"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/companylogin": {
      "get": {
      "summary": "Company login check",
      "description": "This endpoint checks the status of the company login session. It typically returns a status code indicating whether the company is currently logged in or not.",
      "responses": {
        "200": {
          "description": "Login session status checked successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loggedIn": {
                    "type": "boolean",
                    "example": true
                  },
                  "companyId": {
                    "type": "integer",
                    "example": 456
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "summary": "Company login",
      "description": "Authenticate a company with their email and password to obtain an access token.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "company@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              },
              "required": ["email", "password"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Login successful",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": true
                  },
                  "message": {
                    "type": "string",
                    "example": "Login successful"
                  },
                  "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid email or password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": false
                  },
                  "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error logging in company"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/adminlogin": {
      "get": {
      "summary": "Retrieve Admin Login Status",
      "description": "This endpoint retrieves the current login status of the admin. It checks if the admin is currently logged in.",
      "responses": {
        "200": {
          "description": "OK"
        }
      }
    },
    "post": {
      "summary": "Admin Login",
      "description": "This endpoint allows an admin to log in by providing email and password. It returns a token upon successful login.",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "any@example.com",
                "description": "The email of the admin."
              },
              "password": {
                "type": "string",
                "example": "yourpassword",
                "description": "The password of the admin."
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK"
        },
        "401": {
          "description": "Unauthorized - Incorrect email or password."
        },
        "500": {
          "description": "Internal Server Error"
        }
      }
    }
  },
    "/adminhomepage": {
      "get": {
      "summary": "Retrieve Admin Homepage",
      "description": "This endpoint retrieves the admin homepage content. It provides the main view for the admin after logging in.",
      "responses": {
        "200": {
          "description": "OK"
        }
      }
    }
  },
    "/createadmin": {
      "get": {
      "summary": "Retrieve Create Admin Page",
      "description": "This endpoint retrieves the page for creating a new admin. It provides the form for entering admin details.",
      "responses": {
        "200": {
          "description": "OK"
        }
      }
    },
    "post": {
      "summary": "Create New Admin",
      "description": "This endpoint allows the creation of a new admin by providing the required admin details. Returns a confirmation of creation upon success.",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Admin Name",
                "description": "The name of the new admin."
              },
              "password": {
                "type": "string",
                "example": "yourpassword",
                "description": "The password for the new admin."
              },
              "adminEmail": {
                "type": "string",
                "example": "admin@example.com",
                "description": "The email address of the new admin."
              }
            }
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Created - New admin successfully created."
        },
        "500": {
          "description": "Internal Server Error"
        }
      }
    }
  },
    "/viewaccounts": {
      "get": {
      "summary": "View All Admin Accounts",
      "description": "Endpoint to view all admin accounts. This is used to retrieve a list of all admin users in the system.",
      "responses": {
        "200": {
          "description": "OK - Successfully retrieved list of admin accounts."
        }
      }
    }
  },
    "/updateaccount": {
      "get": {
      "summary": "Retrieve Admin Account Details for Update",
      "description": "Endpoint to retrieve information for updating an admin account. This might be used to fetch current details of an admin for editing purposes.",
      "responses": {
        "200": {
          "description": "OK - Successfully retrieved admin account details for updating."
        }
      }
    }
  },
    "/manageevents": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/manageblogs": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/article/{articleId}/comments": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/event/{eventId}/comments": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chatbot": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/credits": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/article": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleCreateBlog": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleIndividual": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleFavourites": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleMyBlogs": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleEdit": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/articleSearch": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/profile": {
      "get": {
      "summary": "Get user profile",
      "description": "Retrieve the profile information of the currently logged-in user. This includes user details such as name, email, and profile picture.",
      "responses": {
        "200": {
          "description": "Profile retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer",
                    "example": 123
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "profilePicture": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/images/profile123.jpg"
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - User not logged in",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": false
                  },
                  "message": {
                    "type": "string",
                    "example": "User not authenticated"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error retrieving profile information"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/users": {
      "get": {
      "summary": "List all users",
      "description": "Retrieve a list of all users. This can be used by admin roles to get a complete list of registered users.",
      "responses": {
        "200": {
          "description": "Users retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "integer",
                      "example": 123
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "john.doe@example.com"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error retrieving users list"
                  }
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "summary": "Create a new user",
      "description": "Register a new user with the provided details. This endpoint typically requires an admin or specific role privileges.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Jane Doe"
                },
                "email": {
                  "type": "string",
                  "example": "jane.doe@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              },
              "required": ["name", "email", "password"]
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "User created successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": true
                  },
                  "message": {
                    "type": "string",
                    "example": "User created successfully"
                  },
                  "userId": {
                    "type": "integer",
                    "example": 124
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request - Invalid user data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": false
                  },
                  "message": {
                    "type": "string",
                    "example": "Invalid user data provided"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error creating user"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/users/{userId}": {
      "get": {
        "summary": "Get user account by ID",
        "description": "Retrieve detailed information about a user account by their user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "integer",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "user@example.com"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "userType": {
                      "type": "string",
                      "example": "U"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error retrieving user"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user account by ID",
        "description": "Update user account details based on the provided user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "integer",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "user@example.com"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error updating user"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user account by ID",
        "description": "Delete a user account based on the provided user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User account deleted successfully"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error deleting user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-event": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "eventTime": {
                  "example": "any"
                },
                "cost": {
                  "example": "any"
                },
                "eventImage": {
                  "example": "any"
                },
                "eventName": {
                  "example": "any"
                },
                "eventDesc": {
                  "example": "any"
                },
                "eventOverview": {
                  "example": "any"
                },
                "eventCategory": {
                  "example": "any"
                },
                "eventReports": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/events": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/events/userEvents": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/myEvents": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/events-content": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/{eventId}/signup": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "eventTime": {
                  "example": "any"
                },
                "cost": {
                  "example": "any"
                },
                "eventImage": {
                  "example": "any"
                },
                "eventName": {
                  "example": "any"
                },
                "eventDesc": {
                  "example": "any"
                },
                "eventOverview": {
                  "example": "any"
                },
                "eventCategory": {
                  "example": "any"
                },
                "eventReports": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/{eventId}/leave": {
      "patch": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/kick/{userId}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/authorize": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "authorizationID": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/capture": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/payments/capture/{eventId}": {
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/refreshToken": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/game": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/save-game": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "gridSize": {
                  "example": "any"
                },
                "buildingsGrid": {
                  "example": "any"
                },
                "points": {
                  "example": "any"
                },
                "coins": {
                  "example": "any"
                },
                "turnNumber": {
                  "example": "any"
                },
                "gameMode": {
                  "example": "any"
                },
                "saveDate": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/save-game2": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "gridSize": {
                  "example": "any"
                },
                "buildingsGrid": {
                  "example": "any"
                },
                "points": {
                  "example": "any"
                },
                "coins": {
                  "example": "any"
                },
                "turnNumber": {
                  "example": "any"
                },
                "gameMode": {
                  "example": "any"
                },
                "saveDate": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/get-games": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/get-high-scores": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/create-high-score": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "gameId": {
                  "example": "any"
                },
                "playerName": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
"/api/article/comment/{commentId}": {
    "get": {
      "summary": "Get a specific comment by ID",
      "parameters": [
        {
          "name": "commentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The ID of the comment to retrieve"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commentId": {
                    "type": "integer"
                  },
                  "content": {
                    "type": "string"
                  },
                  "parentCommentId": {
                    "type": "integer",
                    "nullable": true
                  },
                  "timeStamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "score": {
                    "type": "integer"
                  },
                  "userId": {
                    "type": "integer"
                  },
                  "articleId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error"
        }
      }
    }
  },
  "/api/article/{articleId}/comments/latest": {
    "get": {
      "summary": "Get the latest comments for an article",
      "parameters": [
        {
          "name": "articleId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The ID of the article for which to retrieve comments"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "commentId": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "string"
                    },
                    "parentCommentId": {
                      "type": "integer",
                      "nullable": true
                    },
                    "timeStamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "score": {
                      "type": "integer"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "articleId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error"
        }
      }
    }
  },
  "/api/article/{articleId}/comments/relevance": {
    "get": {
      "summary": "Get the most relevant comments for an article",
      "parameters": [
        {
          "name": "articleId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The ID of the article for which to retrieve comments"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "commentId": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "string"
                    },
                    "parentCommentId": {
                      "type": "integer",
                      "nullable": true
                    },
                    "timeStamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "score": {
                      "type": "integer"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "articleId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error"
        }
      }
    }
  },
    "/api/article/{articleId}/comments": {
      "post": {
        "summary": "Create a new comment for an article",
        "description": "Create a new comment associated with a specific article.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the article for which to create a comment"
          }
        ],
        "requestBody": {
          "description": "The comment data to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The content of the comment",
                    "example": "This is a sample comment."
                  },
                  "score": {
                    "type": "integer",
                    "description": "The score of the comment",
                    "example": 5
                  },
                  "timeStamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the comment",
                    "example": "2023-07-28T12:34:56Z"
                  },
                  "userId": {
                    "type": "integer",
                    "description": "The ID of the user creating the comment",
                    "example": 123
                  },
                  "articleId": {
                    "type": "integer",
                    "description": "The ID of the article",
                    "example": 456
                  },
                  "parentCommentId": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The ID of the parent comment, if this is a reply",
                    "example": null
                  }
                },
                "required": ["content", "score", "timeStamp", "userId", "articleId"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commentId": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "string"
                    },
                    "parentCommentId": {
                      "type": "integer",
                      "nullable": true
                    },
                    "timeStamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "score": {
                      "type": "integer"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "articleId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "ArticleId mismatch with parent comment"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Error creating comment"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a comment for an article",
        "description": "Update the content and/or score of a comment associated with a specific article.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the article for which to update a comment"
          }
        ],
        "requestBody": {
          "description": "The updated comment data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commentId": {
                    "type": "integer",
                    "description": "The ID of the comment to update",
                    "example": 1
                  },
                  "content": {
                    "type": "string",
                    "nullable": true,
                    "description": "The new content of the comment",
                    "example": "This is the updated comment content."
                  },
                  "score": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The new score of the comment",
                    "example": 4
                  }
                },
                "required": ["commentId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commentId": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "string"
                    },
                    "parentCommentId": {
                      "type": "integer",
                      "nullable": true
                    },
                    "timeStamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "score": {
                      "type": "integer"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "articleId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "At least one of newContent or newScore must be provided."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Comment not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Error updating comment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a comment for an article",
        "description": "Delete a specific comment associated with a specific article.",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the article for which to delete a comment"
          }
        ],
        "requestBody": {
          "description": "The ID of the comment to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commentId": {
                    "type": "integer",
                    "description": "The ID of the comment to delete",
                    "example": 789
                  }
                },
                "required": ["commentId"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Comment not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Error deleting comment"
                }
              }
            }
          }
        }
      }
    },
    "/api/event/comment/{commentId}": {
      "get": {
        "summary": "Get a specific comment by ID",
        "description": "Retrieve a specific comment by its commentId.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the comment to retrieve.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested comment details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commentId": { "type": "integer", "example": 1 },
                    "content": { "type": "string", "example": "This is a comment." },
                    "score": { "type": "integer", "example": 10 },
                    "timeStamp": { "type": "string", "format": "date-time", "example": "2023-01-01T12:00:00Z" },
                    "userId": { "type": "integer", "example": 1 },
                    "eventId": { "type": "integer", "example": 1 },
                    "parentCommentId": { "type": "integer", "example": null }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/event/{eventId}/comments/latest": {
      "get": {
        "summary": "Get comments for a specific event, ordered by latest timestamp",
        "description": "Retrieve all comments for a specific event, ordered by latest timestamp.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comments ordered by the latest timestamp.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "commentId": { "type": "integer", "example": 1 },
                      "content": { "type": "string", "example": "This is a comment." },
                      "score": { "type": "integer", "example": 10 },
                      "timeStamp": { "type": "string", "format": "date-time", "example": "2023-01-01T12:00:00Z" },
                      "userId": { "type": "integer", "example": 1 },
                      "eventId": { "type": "integer", "example": 1 },
                      "parentCommentId": { "type": "integer", "example": null },
                      "level": { "type": "integer", "example": 0 }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/event/{eventId}/comments/relevance": {
      "get": {
        "summary": "Get comments for a specific event, ordered by relevance score",
        "description": "Retrieve all comments for a specific event, ordered by relevance score.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the event.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comments ordered by relevance score.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "commentId": { "type": "integer", "example": 1 },
                      "content": { "type": "string", "example": "This is a comment." },
                      "score": { "type": "integer", "example": 10 },
                      "timeStamp": { "type": "string", "format": "date-time", "example": "2023-01-01T12:00:00Z" },
                      "userId": { "type": "integer", "example": 1 },
                      "eventId": { "type": "integer", "example": 1 },
                      "parentCommentId": { "type": "integer", "example": null },
                      "level": { "type": "integer", "example": 0 }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/event/{eventId}/comments": {
      "post": {
        "summary": "Create a new comment for the event",
        "description": "Create a new comment for the event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "articleId": {
                    "type": "integer",
                    "example": 1
                  },
                  "eventId": {
                    "type": "integer",
                    "example": 1
                  },
                  "content": {
                    "type": "string",
                    "example": "This is a comment."
                  },
                  "score": {
                    "type": "integer",
                    "example": 5
                  },
                  "parentCommentId": {
                    "type": "integer",
                    "example": null
                  }
                },
                "required": ["eventId", "content"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update an existing comment for the event",
        "description": "Update an existing comment for the event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "articleId": {
                    "type": "integer",
                    "example": 1
                  },
                  "eventId": {
                    "type": "integer",
                    "example": 1
                  },
                  "commentId": {
                    "type": "integer",
                    "example": 1
                  },
                  "content": {
                    "type": "string",
                    "example": "Updated comment content."
                  },
                  "score": {
                    "type": "integer",
                    "example": 4
                  }
                },
                "required": ["commentId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing comment for the event",
        "description": "Delete an existing comment for the event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commentId": {
                    "type": "integer",
                    "example": 1
                  }
                },
                "required": ["commentId"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/chatbot/{conversationId}": {
      "get": {
        "summary": "Fetch Chat History",
        "description": "Retrieve the full chat history for a given conversation ID. If no chat history is found, initialize with a welcome message and predefined responses.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chatHistory": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "chatHistoryId": {
                            "type": "integer"
                          },
                          "timeStamp": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "conversationId": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Send User Input to Chatbot",
        "description": "Send a user query to the chatbot and get the response. The query and response are stored in the chat history.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "example": "any"
                  }
                },
                "required": ["query"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/chatConversation/{userId}": {
      "get": {
        "summary": "Retrieve all chat conversations for a given user",
        "description": "This endpoint retrieves all chat conversations associated with a specific user, identified by their userId. The results are ordered by the timestamp in descending order.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a new chat conversation for a user",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "conversationTitle": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/chatConversation/{conversationId}": {
      "put": {
        "summary": "Update the title of an existing chat conversation",
        "description": "This endpoint updates the title of an existing chat conversation identified by its conversationId.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "conversationTitle": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing chat conversation along with chat histories in the chat conversation",
        "description": "This endpoint deletes an existing chat conversation identified by its conversationId",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/admin": {
      "get": {
      "summary": "Retrieve All Admins",
      "description": "Endpoint to retrieve a list of all admin accounts. This provides details about all admin users in the system.",
      "responses": {
        "200": {
          "description": "OK - Successfully retrieved the list of admins."
        },
        "500": {
          "description": "Internal Server Error - An error occurred while processing the request."
        }
      }
    },
    "post": {
      "summary": "Create a New Admin",
      "description": "Endpoint to create a new admin account. The request body should include the necessary details to create an admin user.",
      "responses": {
        "201": {
          "description": "Created - Successfully created a new admin."
        },
        "400": {
          "description": "Bad Request - The request could not be processed due to invalid input."
        },
        "500": {
          "description": "Internal Server Error - An error occurred while processing the request."
        }
      }
    }
  },
    "/admin/{adminId}": {
      "get": {
      "summary": "Retrieve Admin Details",
      "description": "Endpoint to retrieve details of a specific admin account by admin ID. This provides information about a single admin user.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK - Successfully retrieved the admin details."
        },
        "404": {
          "description": "Not Found - The admin with the specified ID was not found."
        },
        "500": {
          "description": "Internal Server Error - An error occurred while processing the request."
        }
      }
    },
    "put": {
      "summary": "Update Admin Details",
      "description": "Endpoint to update details of a specific admin account by admin ID. The request body should include the updated details for the admin.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK - Successfully updated the admin details."
        },
        "400": {
          "description": "Bad Request - The request could not be processed due to invalid input."
        },
        "404": {
          "description": "Not Found - The admin with the specified ID was not found."
        },
        "500": {
          "description": "Internal Server Error - An error occurred while processing the request."
        }
      }
    },
    "delete": {
      "summary": "Delete Admin",
      "description": "Endpoint to delete a specific admin account by admin ID. This removes the admin from the system.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK - Successfully deleted the admin."
        },
        "404": {
          "description": "Not Found - The admin with the specified ID was not found."
        },
        "500": {
          "description": "Internal Server Error - An error occurred while processing the request."
        }
      }
    }
  },
    "/api/article": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/create-blog": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "publicationDate": {
                  "example": "any"
                },
                "photo": {
                  "example": "any"
                },
                "title": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                },
                "content": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/isFavourite/{userId}/{articleId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/id/{articleId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/favourites/{userId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/addFavourite/{userId}": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "articleId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/removeFavourite/{userId}": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "articleId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/user/{userId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/article/title": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/profile/{userId}": {
      "get": {
      "summary": "Get user profile by ID",
      "description": "Retrieve the profile information of a specific user based on their user ID. This includes details such as name, email, and profile picture.",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Profile retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer",
                    "example": 123
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "profilePicture": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/images/profile123.jpg"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error retrieving user profile"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/profilePicture/{userId}": {
      "get": {
      "summary": "Get user profile picture by ID",
      "description": "Retrieve the profile picture of a specific user based on their user ID.",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Profile picture retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/images/profile123.jpg"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User or profile picture not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Profile picture not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error retrieving profile picture"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/uploadProfilePicture/{userId}": {
      "post": {
      "summary": "Upload a new profile picture for the user",
      "description": "Upload a new profile picture for a specific user based on their user ID. Requires authorization and specific permissions.",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123"
          }
        },
        {
          "name": "authorization",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Bearer <token>"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "required": ["file"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Profile picture uploaded successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Profile picture updated successfully"
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing authentication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Unauthorized access"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Forbidden - Insufficient permissions"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error uploading profile picture"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/getAboutInfo/{userId}": {
      "get": {
      "summary": "Get user's 'About' information",
      "description": "Retrieve the 'About' information for a specific user based on their user ID.",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123"
          }
        },
        {
          "name": "authorization",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Bearer <token>"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "About information retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "about": {
                    "type": "string",
                    "example": "This is a brief description about the user."
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing authentication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Unauthorized access"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Forbidden - Insufficient permissions"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User or 'About' information not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User or 'About' information not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error retrieving 'About' information"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/saveAboutInfo/{userId}": {
      "post": {
      "summary": "Save or update user's 'About' information",
      "description": "Save or update the 'About' information for a specific user based on their user ID. Requires authorization and specific permissions.",
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "123"
          }
        },
        {
          "name": "authorization",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Bearer <token>"
          }
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "about": {
                    "type": "string",
                    "example": "This is a brief description about the user."
                  }
                },
                "required": ["about"]
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "About information updated successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "About information updated successfully"
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing authentication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Unauthorized access"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Forbidden - Insufficient permissions"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "User not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "User not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal Server Error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string",
                    "example": "Error updating 'About' information"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/adminProfile/{adminId}": {
      "get": {
      "summary": "Retrieve admin profile information",
      "description": "Fetches the profile information (name, email, and profile picture URL) of an admin using their adminId.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "1"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Admin profile information retrieved successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Admin Name"
                  },
                  "email": {
                    "type": "string",
                    "example": "admin@example.com"
                  },
                  "profilePictureUrl": {
                    "type": "string",
                    "example": "/api/adminProfilePicture/1"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Admin not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Admin not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Error fetching admin data"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/adminProfilePicture/{adminId}": {
      "get": {
      "summary": "Retrieve admin profile picture",
      "description": "Fetches the profile picture of an admin using their adminId. The picture is served as an image file.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "1"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Admin profile picture retrieved successfully",
          "content": {
            "image/jpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "404": {
          "description": "Profile picture not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Profile picture not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Error fetching profile picture"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
    "/api/uploadAdminProfilePicture/{adminId}": {
      "post": {
      "summary": "Upload a new profile picture for an admin",
      "description": "Uploads a new profile picture for the admin specified by adminId. Requires authorization.",
      "parameters": [
        {
          "name": "adminId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "example": "1"
          }
        },
        {
          "name": "authorization",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "example": "Bearer <token>"
          }
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["profilePicture"]
              }
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Profile picture uploaded successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePictureUrl": {
                    "type": "string",
                    "example": "/api/adminProfilePicture/1"
                  }
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing authentication",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Unauthorized access"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Forbidden - Insufficient permissions"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Admin not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Admin not found"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Failed to upload profile picture"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  }
}